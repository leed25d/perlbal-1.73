.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perlbal::Test 3pm"
.TH Perlbal::Test 3pm "2009-10-05" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perlbal::Test \- Test harness for perlbal server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
#  my \f(CW$msock\fR = \fIPerlbal::Test::start_server()\fR;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perlbal::Test provides access to a perlbal server running on the
local host, for testing purposes.
.PP
The server can be an already-existing server, a child process, or
the current process.
.PP
Various functions are provided to interact with the server.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SH "\fImgmt_port()\fP"
.IX Header "mgmt_port()"
Return the current management port number.
.SH "\fIdump_res($http_response)\fP"
.IX Header "dump_res($http_response)"
Return a readable string formatted from an HTTP::Response object.
Only the first 80 characters of returned content are returned.
.SH "\fItempdir()\fP"
.IX Header "tempdir()"
Return a newly created temporary directory. The directory will be
removed automatically upon program exit.
.SH "\fInew_port()\fP"
.IX Header "new_port()"
Return the next free port number in the series. Port numbers are assigned
starting at 60000.
.SH "\fItest_port()\fP"
.IX Header "test_port()"
Return 1 if the port is free to use for listening on \f(CW$free_port\fR else return 0.
.SH "\fIfilecontent($file\fP>"
.IX Header "filecontent($file>"
Return a string containing the contents of the file \f(CW$file\fR. If \f(CW$file\fR
cannot be opened, then return undef.
.SH "\fIforeach_aio($callback)\fP"
.IX Header "foreach_aio($callback)"
Set the server into each \s-1AIO\s0 mode (none, ioaio) and call the specified
callback function with the mode name as argument.
.ie n .SH "\fImanage($cmd, \fP\fI%opts\fP\fI)\fP"
.el .SH "\fImanage($cmd, \fP\f(CI%opts\fP\fI)\fP"
.IX Header "manage($cmd, %opts)"
Send a command \f(CW$cmd\fR to the server, and return the response line from
the server.
.PP
Optional arguments are:
.PP
.Vb 1
\&  quiet_failure => 1
.Ve
.PP
Output a warning if the response indicated an error,
unless \f(CW$opts\fR{quiet_failure} is true, or the command
was 'shutdown' (which doesn't return a response).
.SH "\fImanage_multi($cmd)\fP"
.IX Header "manage_multi($cmd)"
Send a command \f(CW$cmd\fR to the server, and return a multi-line
response. Return the number zero if there was an error or
no response.
.SH "\fIstart_server($conf)\fP"
.IX Header "start_server($conf)"
Optionally start a perlbal server and return a socket connected to its
management port.
.PP
The argument \f(CW$conf\fR is a string specifying initial configuration
commands.
.PP
If the environment variable \s-1TEST_PERLBAL_FOREGROUND\s0 is set to a true
value then a server will be started in the foreground, in which case
this function does not return. When the server function finishes,
\&\fIexit()\fR will be called to terminate the process.
.PP
If the environment variable \s-1TEST_PERLBAL_USE_EXISTING\s0 is set to a true
value then a socket will be returned which is connected to an existing
server's management port.
.PP
Otherwise, a child process is forked and a socket is returned which is
connected to the child's management port.
.PP
The management port is assigned automatically, a new port number each
time this function is called. The starting port number is 60000.
.SH "\fImsock()\fP"
.IX Header "msock()"
Return a reference to the socket connected to the server's management
port.
.SH "\fIua()\fP"
.IX Header "ua()"
Return a new instance of LWP::UserAgent.
.ie n .SH "\fIwait_on_child($pid, \fP\fI$port\fP\fI)\fP"
.el .SH "\fIwait_on_child($pid, \fP\f(CI$port\fP\fI)\fP"
.IX Header "wait_on_child($pid, $port)"
Return a socket which is connected to a child process.
.PP
\&\f(CW$pid\fR specifies the child process id, and \f(CW$port\fR is the port number on
which the child is listening.
.PP
Several attempts are made; if the child dies or a connection cannot
be made within 5 seconds then this function dies with an error message.
.SH "\fIresp_from_sock($sock)\fP"
.IX Header "resp_from_sock($sock)"
Read an \s-1HTTP\s0 response from a socket and return it
as an HTTP::Response object
.PP
In scalar mode, return only the \f(CW$http_response\fR object.
.PP
In array mode, return an array of ($http_response, \f(CW$firstline\fR) where
\&\f(CW$firstline\fR is the first line read from the socket, for example:
.PP
\&\*(L"\s-1HTTP/1\s0.1 200 \s-1OK\s0\*(R"
